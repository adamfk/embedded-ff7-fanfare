//////////////////////////////////////////////////////////////////////////////////
// FILE: src/io_config.hpp
//////////////////////////////////////////////////////////////////////////////////
// #pragma once
const int IO_PIN_BUZZER = 10;


//////////////////////////////////////////////////////////////////////////////////
// FILE: src/audio/Note.hpp
//////////////////////////////////////////////////////////////////////////////////
// #pragma once
#include <stdint.h>

struct Note
{
    uint16_t tone_hz;
    uint16_t duration_ms;
};


//////////////////////////////////////////////////////////////////////////////////
// FILE: src/audio/Song.hpp
//////////////////////////////////////////////////////////////////////////////////
// #pragma once
// #include "Note.hpp"
#include <stdint.h>

struct Song
{
    explicit Song(const Note* notes, uint16_t notes_length, uint8_t note_interior_end_gap_ms = 0)
        : notes(notes)
        , notes_length(notes_length)
        , note_interior_end_gap_ms(note_interior_end_gap_ms) {}

    const Note* notes;
    const uint16_t notes_length;

    // This doesn't affect the note duration, but it does affect the time between note tones.
    // The longer this is, the shorter the note's tone duration will be.
    const uint8_t note_interior_end_gap_ms;
};


//////////////////////////////////////////////////////////////////////////////////
// FILE: src/audio/SongPlayer.hpp
//////////////////////////////////////////////////////////////////////////////////
/**
 * Inspired from https://wokwi.com/projects/390785670905308161
 */
// #pragma once
// #include "../io_config.hpp" // relative path for arduino IDE
// #include "Song.hpp"
#include <Arduino.h> // for tone() and noTone()

/**
 * NOTE: this class is susceptible to uint32 milliseconds overflow every 50 days or so.
 */
class SongPlayer
{
  public:
    void set_song(const Song &song, uint8_t frequency_scaler = 1)
    {
        m_song = &song;
        m_frequency_scaler = frequency_scaler;
    }

    void stop()
    {
        noTone(IO_PIN_BUZZER);
        m_note_index = UINT16_MAX;
    }

    void play_from_start(const uint32_t current_time_ms)
    {
        if (m_song == nullptr)
        {
            return;
        }

        const Song &song = *m_song;

        m_note_index = 0;
        m_ms_to_next_event = current_time_ms;
        m_play_note(song, song.notes[m_note_index], current_time_ms);
    }

    void update(const uint32_t current_time_ms)
    {
        if (m_song == nullptr)
        {
            return;
        }

        const Song &song = *m_song;

        if (m_note_index > song.notes_length)
        {
            return; // no more notes to play
        }

        if (current_time_ms < m_ms_to_next_event)
        {
            return; // not yet time to play the next note
        }

        const bool need_to_stop_last_note = (m_note_index == song.notes_length);
        if (need_to_stop_last_note)
        {
            noTone(IO_PIN_BUZZER); // stop playing the last note
            m_note_index++; // to prevent this from being called again
            return;
        }

        const Note &note = song.notes[m_note_index];
        m_play_note(song, note, current_time_ms);
    }

    static uint16_t calc_tone_duration_ms(uint16_t note_duration_ms, uint8_t note_interior_end_gap_ms)
    {
        // UNSIGNED SUBTRACTION! Watch for underflow.
        // clamp if underflowed
        uint16_t tone_duration_ms = note_duration_ms - note_interior_end_gap_ms;
        if (tone_duration_ms > note_duration_ms)
        {
            // underflowed, clamp it
            tone_duration_ms = 0;
        }

        return tone_duration_ms;
    }

  private:
    uint16_t m_note_index = 0;
    uint16_t m_ms_to_next_event = 0;
    uint8_t m_frequency_scaler = 1;
    const Song *m_song = nullptr;

    void m_play_note(const Song &song, const Note &note, const uint32_t current_time_ms)
    {
        if (note.tone_hz == 0)
        {
            noTone(IO_PIN_BUZZER);
        }
        else
        {
            const uint16_t tone_duration_ms = calc_tone_duration_ms(note.duration_ms, song.note_interior_end_gap_ms);
            const uint16_t scaled_frequency = note.tone_hz * m_frequency_scaler;
            tone(IO_PIN_BUZZER, scaled_frequency, tone_duration_ms);
        }

        // For timing the next note, we have two options:
        //     - option 1. prioritize song timing over note timing
        //     - option 2. prioritize note timing over song timing
 
        // option 1: prioritize song timing over note timing
        m_ms_to_next_event += note.duration_ms;
        (void)current_time_ms; // to avoid unused variable warning

        // option 2: prioritize note timing over song timing
        // m_ms_to_next_event = current_time_ms + note.duration_ms;

        m_note_index++;
    }
};


//////////////////////////////////////////////////////////////////////////////////
// FILE: src/audio/songs.hpp
//////////////////////////////////////////////////////////////////////////////////
// #pragma once
// #include "Song.hpp"

class Ff7FanFare
{
public:
    static const Song song;

private:
    static const Note notes[];
};


//////////////////////////////////////////////////////////////////////////////////
// FILE: src/audio/songs.cpp
//////////////////////////////////////////////////////////////////////////////////
// #include "songs.hpp"
#include <stddef.h>

#define COUNT_OF(x) ((sizeof(x)/sizeof(0[x])) / ((size_t)(!(sizeof(x) % sizeof(0[x])))))

// These frequencies will need to be scaled up to be audible with a piezo speaker,
// but we are simulating on a PC and I find the lower frequencies less irritating :)
// Tones: https://github.com/bhagman/Tone
#define Ab1 52
#define Bb1 58
#define C_2 65

// minimum duration for a note to be audible with wokwi
#define MINIMUM_DURATION_MS 50

// quarter note duration
#define WHOLE    520
#define HALF     (WHOLE / 2)
#define QUARTER  (HALF / 2)
#define EIGHTH   (QUARTER / 2)

// https://www.hooktheory.com/theorytab/view/nobuo-uematsu/final-fantasy-vii---victory-fanfare
// RAM: AVR based boards should consider storing in PROGMEM to save RAM
const Note Ff7FanFare::notes[] = {
    { .tone_hz = C_2, .duration_ms = QUARTER },
    { .tone_hz = C_2, .duration_ms = QUARTER },
    { .tone_hz = C_2, .duration_ms = QUARTER },
    { .tone_hz = C_2, .duration_ms = QUARTER * 3 },
    { .tone_hz = Ab1, .duration_ms = QUARTER * 3 },
    { .tone_hz = Bb1, .duration_ms = QUARTER * 3 },
    { .tone_hz = C_2, .duration_ms = HALF },
    { .tone_hz = Bb1, .duration_ms = QUARTER },
    { .tone_hz = C_2, .duration_ms = WHOLE * 2 }
};

// RAM: AVR based boards should consider storing in PROGMEM to save RAM
const Song Ff7FanFare::song
{
    .notes = &notes[0],
    .notes_length = COUNT_OF(notes),
    .note_interior_end_gap_ms = MINIMUM_DURATION_MS // so we can hear the end of each note
};


//////////////////////////////////////////////////////////////////////////////////
// FILE: ff7-fanfare-fsm.ino
//////////////////////////////////////////////////////////////////////////////////
// #include "src/audio/songs.hpp"
// #include "src/audio/SongPlayer.hpp"

const uint8_t frequency_scaler = 2;
SongPlayer player{};

void setup()
{
    delay(500); // seems required for wokwi to not miss the first note

    player.set_song(Ff7FanFare::song, frequency_scaler);
    player.play_from_start(millis());
}

void loop()
{
    player.update(millis());
    delay(5); // lower wokwi simulation CPU usage
}


